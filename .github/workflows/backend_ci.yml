# Re-trigger CI to rebuild images after ACR recreation

# week07/.github/workflows/backend_ci.yml
# CI pipeline to test backend services and push Docker images to ACR

name: Backend CI - Test, Build and Push Images to ACR

on:
  # Manual trigger
  workflow_dispatch:

  # Automatically on pushes to main branch
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - '.github/workflows/backend_ci.yml'

env:
  # Use commit SHA and run ID to create unique image tags (optional, not used in this version)
  IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}

jobs:
  test_and_lint_backends:
    runs-on: ubuntu-latest

    services:
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          for req in backend/*/requirements.txt; do
            echo "Installing $req"
            pip install -r "$req"
          done
          pip install pytest httpx

      - name: Run product_service tests
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: |
          pytest tests --maxfail=1 --disable-warnings -q

      - name: Run order_service tests
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: |
          pytest tests --maxfail=1 --disable-warnings -q

  build_and_push_images:
    runs-on: ubuntu-latest
    needs: test_and_lint_backends

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Azure Container Registry with Docker
        run: echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login ${{ secrets.REGISTRY_NAME }}.azurecr.io --username ${{ secrets.REGISTRY_USERNAME }} --password-stdin

      - name: Build and Push Product Service Image
        run: |
          docker build -t ${{ secrets.REGISTRY_NAME }}.azurecr.io/product_service:latest ./backend/product_service/
          docker push ${{ secrets.REGISTRY_NAME }}.azurecr.io/product_service:latest

      - name: Build and Push Order Service Image
        run: |
          docker build -t ${{ secrets.REGISTRY_NAME }}.azurecr.io/order_service:latest ./backend/order_service/
          docker push ${{ secrets.REGISTRY_NAME }}.azurecr.io/order_service:latest
